#include "parser.hpp"

namespace FoxLang {

/// numberexpr ::= number
std::unique_ptr<ExprAST> Parser::ParseNumberExpr() {
	auto Result = std::make_unique<NumberExprAST>(streamer->advance()->lexeme);
	// streamer->peek(); // consume the number
	return std::move(Result);
}

/// parenexpr ::= '(' expression ')'
std::unique_ptr<ExprAST> Parser::ParseParenExpr() {
	// streamer->peek(); // eat (.
	streamer->advance();
	auto V = ParseExpression();
	if (!V) return nullptr;

	if (!streamer->match(TokenType::RIGHT_PAREN))
		return LogError("expected ')'");
	return V;
}

/// identifierexpr
///   ::= identifier
///   ::= identifier '(' expression* ')'
std::unique_ptr<ExprAST> Parser::ParseIdentifierExpr() {
	Token *token = streamer->advance();

	if (streamer->peek()->type != TokenType::LEFT_PAREN) // Simple variable ref.
		return std::make_unique<VariableExprAST>(token->lexeme);

	// Call.
	Token *tokenArgs = streamer->advance();
	std::vector<std::optional<std::unique_ptr<ExprAST>>> Args;
	if (tokenArgs->type != TokenType::RIGHT_PAREN) {
		tokenArgs = streamer->advance();
		while (true) {
			if (auto Arg = ParseExpression())
				Args.push_back(std::move(Arg));
			else
				return nullptr;

			if (tokenArgs->type == TokenType::RIGHT_PAREN) break;

			if (tokenArgs->type != TokenType::COMMA)
				return LogError("Expected ')' or ',' in argument list");
			tokenArgs = streamer->advance();
		}
	}

	// Eat the ')'.
	streamer->advance();

	return std::make_unique<CallExprAST>(token->lexeme, std::move(Args));
}

/// primary
///   ::= identifierexpr
///   ::= numberexpr
///   ::= parenexpr
std::unique_ptr<ExprAST> Parser::ParsePrimary() {
	auto token = streamer->peek();
	switch (token->type) {
	default:
		return LogError("unknown token when expecting an expression");
	case TokenType::IDENTIFIER:
		return ParseIdentifierExpr();
	case TokenType::NUMBER:
		return ParseNumberExpr();
	case TokenType::LEFT_PAREN:
		return ParseParenExpr();
	}
}

/// binoprhs
///   ::= ('+' primary)*
std::unique_ptr<ExprAST> Parser::ParseBinOpRHS(int ExprPrec,
											   std::unique_ptr<ExprAST> LHS) {
	// If this is a binop, find its precedence.
	while (true) {
		int TokPrec = GetTokPrecedence(streamer->peek());

		// If this is a binop that binds at least as tightly as the current
		// binop, consume it, otherwise we are done.
		if (TokPrec < ExprPrec) return LHS;

		// Okay, we know this is a binop.
		Token *BinOp = streamer->advance();

		// Parse the primary expression after the binary operator.
		auto RHS = ParsePrimary();
		if (!RHS) return nullptr;

		// If BinOp binds less tightly with RHS than the operator after RHS, let
		// the pending operator take RHS as its LHS.
		int NextPrec = GetTokPrecedence(streamer->peek());
		if (TokPrec < NextPrec) {
			RHS = ParseBinOpRHS(TokPrec + 1, std::move(RHS));
			if (!RHS) return nullptr;
		}

		// Merge LHS/RHS.
		LHS = std::make_unique<BinaryExprAST>(*BinOp, std::move(LHS),
											  std::move(RHS));
	}
}

/// expression
///   ::= primary binoprhs
///
std::unique_ptr<ExprAST> Parser::ParseExpression() {
	auto LHS = ParsePrimary();
	if (!LHS) return nullptr;

	return ParseBinOpRHS(0, std::move(LHS));
}

/// prototype
///   ::= id '(' id* ')'
std::unique_ptr<PrototypeAST> Parser::ParsePrototype() {
	auto token = streamer->peek();
	if (token->type != TokenType::IDENTIFIER)
		return LogErrorP("Expected function name in prototype");

	std::string FnName = token->lexeme;
	token = streamer->peek();

	if (token->type != TokenType::LEFT_PAREN)
		return LogErrorP("Expected '(' in prototype");

	std::vector<std::string> ArgNames;
	token = streamer->peek();
	while (token->type != TokenType::RIGHT_PAREN) {
		if (token->type == TokenType::IDENTIFIER)
			ArgNames.push_back(token->lexeme);
		else if (token->type != TokenType::COMMA)
			return LogErrorP("Expected Comma seperated list of arguments");
		token = streamer->peek();
	}
	if (token->type != TokenType::RIGHT_PAREN)
		return LogErrorP("Expected ')' in prototype");

	// success.
	streamer->advance(); // eat ')'.

	return std::make_unique<PrototypeAST>(FnName, std::move(ArgNames));
}

/// definition ::= 'def' prototype expression
std::unique_ptr<FunctionAST> Parser::ParseDefinition() {
	streamer->advance(); // eat def.
	auto Proto = ParsePrototype();
	if (!Proto) return nullptr;

	if (auto E = ParseExpression())
		return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
	return nullptr;
}

/// toplevelexpr ::= expression
std::unique_ptr<FunctionAST> Parser::ParseTopLevelExpr() {
	if (auto E = ParseExpression()) {
		// Make an anonymous proto.
		auto Proto = std::make_unique<PrototypeAST>("__anon_expr",
													std::vector<std::string>());
		return std::make_unique<FunctionAST>(std::move(Proto), std::move(E));
	}
	return nullptr;
}

/// external ::= 'extern' prototype
std::unique_ptr<PrototypeAST> Parser::ParseExtern() {
	streamer->advance(); // eat extern.
	return ParsePrototype();
}

//===----------------------------------------------------------------------===//
// Top-Level parsing
//===----------------------------------------------------------------------===//

void Parser::HandleDefinition() {
	if (ParseDefinition()) {
		fprintf(stderr, "Parsed a function definition.\n");
	} else {
		// Skip token for error recovery.
		streamer->peek();
	}
}

void Parser::HandleExtern() {
	if (ParseExtern()) {
		fprintf(stderr, "Parsed an extern\n");
	} else {
		// Skip token for error recovery.
		streamer->peek();
	}
}

void Parser::HandleTopLevelExpression() {
	// Evaluate a top-level expression into an anonymous function.
	if (ParseTopLevelExpr()) {
		fprintf(stderr, "Parsed a top-level expr\n");
	} else {
		// Skip token for error recovery.
		streamer->peek();
	}
}

/// top ::= definition | external | expression | ';'
Parser::Parser(TokenStreamer *streamer) : streamer(streamer) {
	while (true) {
		auto token = streamer->peek();
		switch (token->type) {
		case TokenType::EOF_TOKEN:
			return;
		case TokenType::SEMICOLON: // ignore top-level semicolons.
			streamer->peek();
			break;
		case TokenType::FUNC:
			HandleDefinition();
			break;
		case TokenType::EXTERN:
			HandleExtern();
			break;
		default:
			HandleTopLevelExpression();
			break;
		}
	}
}
} // namespace FoxLang
